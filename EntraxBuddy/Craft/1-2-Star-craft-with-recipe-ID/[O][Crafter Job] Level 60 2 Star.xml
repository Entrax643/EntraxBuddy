<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE Profile [
  <!ENTITY ID_ITEM_RECIPE "30977">
  <!ENTITY ID_FOOD "12861">
  
  <!ENTITY ToT "1">
  <!ENTITY Reclaim "0">
<!-- 437 CP Minimum -->

<!-- 2 Stars Recipes ID 
CRP Astral Birch Lumber : 30986
BSM Adamantite Ingot : 31020
ARM Adamantite Ingot : 31050
GSM Aurum Regis Ingot : 31091
LTW Griffin Leather : 31155
WVR Astral Silk : 31191
ALC Grade 2 Strength Dissolvent : 31201
ALC Grade 2 Dexterity Dissolvent : 31202
ALC Grade 2 Vitality Dissolvent : 31203
ALC Grade 2 Intelligence Dissolvent : 31204
ALC Grade 2 Mind Dissolvent : 31205 -->

]>

<Profile>
    <Name>[O][Crafter Job] Level 60 2 Star</Name>
    <BehaviorDirectory>CustomTags</BehaviorDirectory>
    <CodeChunks>
        <CodeChunk name="ToT">
<![CDATA[
SpellData data;
if ((CraftingManager.Condition == CraftingCondition.Good || CraftingManager.Condition == CraftingCondition.Excellent) &&
Actionmanager.CurrentActions.TryGetValue("Tricks of the Trade", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Tricks of the Trade", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);
]]>
        </CodeChunk>
        <CodeChunk Name="TrickTouch">
<![CDATA[
SpellData data;
if (CraftingManager.Condition == CraftingCondition.Good && Actionmanager.CurrentActions.TryGetValue("Precise Touch", out data) && Actionmanager.CanCast(data, null) && Core.Player.CurrentCP > 49) 
{
Actionmanager.DoAction("Precise Touch", null);
}else
{
if(Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data))
{
Actionmanager.DoAction("Hasty Touch", null);
}
}
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);

await Coroutine.Sleep(250);
]]>
        </CodeChunk>
        <CodeChunk Name="TrickTouch2">
<![CDATA[
SpellData data;
if (CraftingManager.Condition == CraftingCondition.Good && Actionmanager.CurrentActions.TryGetValue("Precise Touch", out data) && Actionmanager.CanCast(data, null) && Core.Player.CurrentCP > 57) 
{
Actionmanager.DoAction("Precise Touch", null);
}else
{
if(Core.Player.CurrentCP > 57 && Actionmanager.CurrentActions.TryGetValue("Basic Touch", out data) && Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data))
{
Actionmanager.DoAction("Basic Touch", null);
}else
{
if(Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data))
{
Actionmanager.DoAction("Hasty Touch", null);
}
}
}
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);

await Coroutine.Sleep(250);
]]>
        </CodeChunk>
        <CodeChunk name="BBCheck">
<![CDATA[
SpellData data;

if (CraftingManager.Condition == CraftingCondition.Excellent)
{
if(Actionmanager.CurrentActions.TryGetValue("Byregot's Blessing", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Byregot's Blessing", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Careful Synthesis II", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Careful Synthesis II", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Careful Synthesis II", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Careful Synthesis II", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Careful Synthesis II", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Careful Synthesis II", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}
}

await Coroutine.Sleep(250);        
]]>
        </CodeChunk>
        <CodeChunk name="ReclaimCheck">
<![CDATA[
SpellData data;

if (Core.Player.CharacterAuras.GetAuraStacksById(251) < 10) 
{
if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);                                  
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Reclaim", out data) && Actionmanager.CanCast(data, null))
{
Actionmanager.DoAction("Reclaim", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);                                  
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}

await Coroutine.Sleep(250);

if (Actionmanager.CurrentActions.TryGetValue("Hasty Touch", out data) && Actionmanager.CanCast(data, null)) 
{
Actionmanager.DoAction("Hasty Touch", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}
}
await Coroutine.Sleep(250);
]]>
        </CodeChunk>
        <CodeChunk name="InnovationCheck">
<![CDATA[
SpellData data;

if (!(CraftingManager.Condition == CraftingCondition.Excellent || CraftingManager.Condition == CraftingCondition.Good))
{
if (Core.Player.CurrentCP > 41 && Actionmanager.CurrentActions.TryGetValue("Innovation", out data) && Actionmanager.CanCast(data, null))
{
Actionmanager.DoAction("Innovation", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}
else
{
if (Core.Player.CurrentCP > 37 && Actionmanager.CurrentActions.TryGetValue("Observe", out data) && Actionmanager.CanCast(data, null))
{
Actionmanager.DoAction("Observe", null);
await Coroutine.Wait(10000, () => CraftingManager.AnimationLocked);
await Coroutine.Wait(Timeout.Infinite, () => !CraftingManager.AnimationLocked);
}
}
}

await Coroutine.Sleep(250);
]]>
        </CodeChunk>
    </CodeChunks>
    <Order>
        <StopCrafting/>
        <WaitTimer WaitTime="3"/>
        <While Condition="True">
            <EatFood ItemId="&ID_FOOD;" HqOnly="True" />
			<!-- Required Skills : Maker's Mark, Flawless Synthesis, Steady Hand 2, Careful synthesis 2, Piece by Piece, Hasty Touch, Byregot's Blessing, Comfort Zone, Waste Not II -->
			<!-- Optionnal : Innovation, Tricks of the Trade, Reclaim -->
            <Synthesize RecipeId="&ID_ITEM_RECIPE;" MinimumCp="437" HQMats="-1,-1,-1,-1,-1" RequiredSkills="100178, 100083, 281, 100069, 100039, 100108, 100009, 286, 285" />
            <CraftActionByName Name="Maker's Mark" />
            <CraftActionByName Name="Comfort Zone" />
            <CraftActionByName Name="Steady Hand" />   
            <CraftActionByName Name="Piece by Piece" />
            <CraftActionByName Name="Piece by Piece" />
            <While Condition="CraftingManager.Progress &lt; 1150">
                <CraftActionByName Name="Flawless Synthesis" />
            </While>
            <If Condition="&ToT; != 0">
                <RunCode Name="ToT"/>            
            </If>
            <While Condition="Core.Player.HasAura(878) and CraftingManager.Progress &lt; 1190">
                <CraftActionByName Name="Flawless Synthesis" />
                <If Condition="&ToT; != 0">
                    <RunCode Name="ToT"/>            
                </If>
            </While>
            <CraftActionByName Name="Comfort Zone" />
            <If Condition="&ToT; != 0">
                <RunCode Name="ToT"/>            
            </If>
            <CraftActionByName Name="Inner Quiet" />
            <If Condition="&ToT; != 0">
                <RunCode Name="ToT"/>            
            </If>
            <CraftActionByName Name="Waste Not II" />
            <CraftActionByName Name="Steady Hand II" />
            <While Condition="Core.Player.HasAura(262)">
                <CraftActionByName Name="Hasty Touch" />
            </While>
            <CraftActionByName Name="Careful Synthesis II" />
            <CraftActionByName Name="Careful Synthesis II" />
            <If Condition="&ToT; != 0">
                <RunCode Name="ToT"/>            
            </If>
            <CraftActionByName Name="Comfort Zone" />
            <If Condition="&ToT; != 0">
                <RunCode Name="ToT"/>            
            </If>
            <CraftActionByName Name="Steady Hand II" />
            <CraftActionByName Name="Hasty Touch" />
            <CraftActionByName Name="Master's Mend II" />
            <While Condition="Core.Player.HasAura(262)">
                <CraftActionByName Name="Hasty Touch" />
            </While>
            <If Condition="&ToT; != 0">
                <RunCode Name="ToT"/>            
            </If>
            <CraftActionByName Name="Steady Hand II" />
            <RunCode Name="BBCheck"/>
            <RunCode Name="TrickTouch"/>
            <RunCode Name="BBCheck"/>
            <RunCode Name="TrickTouch2"/>
            <RunCode Name="BBCheck"/>
            <If Condition="&Reclaim; != 0">
                <RunCode Name="ReclaimCheck"/>                
            </If>
            <CraftActionByName Name="Great Strides" />
            <RunCode Name="InnovationCheck"/>
            <CraftActionByName Name="Byregot's Blessing" />
            <CraftActionByName Name="Careful Synthesis II" />
        </While>
    </Order>
</Profile>